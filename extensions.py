import requests  # Импортируем библиотеку requests для выполнения запросов данных с сервера
import json  # Импортируем библиотеку для парсинга запросов (переконвертировать ответ от сервера в Python-объекты)

from config import exchanges, headers  # Импортируем словарь с валютами и ключ с сайта apilayer.com


# Общий класс исключений, который содержит остальные классы исключений
class ApiException(Exception):  # Через этот класс будем отлавливать исключения связанные с выполнением программы
    pass  # Оператор-заглушка


class Converter:
    @staticmethod  # Статическим методом инкапсулируем класс
    def get_price(base, sym, amount):  # В метод get_price добавляем переменные запроса (base, sym, amount)
        try:
            base_key = exchanges[base.lower()]  # Проверяем доступность запроса валюты на наличие в словаре.
            # Через метод .lower() возвращаем строку запроса в нижнем регистре
        except KeyError:  # Если доступной валюты не оказалось, вызываем исключение через инструкцию raise
            # и выводим сообщение:
            raise ApiException(f"Валют <{base}> нет в списке доступных.\n"
                                f"Список доступных валют можешь получить по команде /values.")
        try:
            sym_key = exchanges[sym.lower()]  # Проверяем доступность запроса валюты на наличие в словаре.
            # Через метод .lower() возвращаем строку запроса в нижнем регистре
        except KeyError:  # Если доступной валюты не оказалось, вызываем исключение через инструкцию raise
            # и выводим сообщение:
            raise ApiException(f"Валюты <{sym}> нет в списке доступных\n"
                                f"Список доступных валют можешь получить по команде /values.")

        if base_key == sym_key:  # Проверяем, чтобы введенные значения валют не были одинаковые, иначе вызываем
            # исключение и выводим сообщение:
            raise ApiException(f"Ведены одинаковые значения валют\n"
                                f"Посмотреть пример ввода валют можешь по команде /example.")

        try:
            amount = float(amount.replace(",", "."))  # Проверяем ввод на правильность ввода.
            # Метод .replace() меняет введенную пользователем запятую на точку, чтобы избежать ошибки
        except ValueError:  # Если пользователь ввел вместо цифр другие символы, вызываем исключение через
            # инструкцию raise и выводим сообщение:
            raise ApiException(f"Количество валюты <{amount}> должно быть цифрой")

        if amount <= 0:  # Проверяем, чтобы пользователь не ввел нулевое или отрицательное число, иначе вызываем
            # исключение и выводим сообщение:
            raise ApiException(f"Введено отрицательное или нулевое количество конвертируемой валюты\n"
                                f"Посмотреть пример ввода валют можешь по команде /example.")

        url = f"https://api.apilayer.com/exchangerates_data/convert?to={sym_key}&from={base_key}&amount={amount}"  # Создаем
        # # строку запроса, через f-строки подставляем нужные значения ключа словаря

        r = requests.get(url, headers=headers)  # Через метод requests.get() возвращаем значение для указанных
        # ключей словаря. headers = ключ API Key с сайта apilayer.com

        resp = json.loads(r.content)  # Через метод json.loads переконвертируем ответ от сервера в Python-объект и
        # передаем в его параметр r.content (контент-запрос)
        new_price = resp['result']  # Обращаемся к ключу result для вывода сумму запроса
        new_price = round(new_price, 3)  # Округляем полученные данные запроса суммы до трех знаков, после запятой
        date = resp['date']  # Обращаемся к ключу date для вывода даты на момент запроса
        # amount = round(amount)
        txt = f"Цена {amount} {base.lower()} в {sym.lower()} : {new_price} на {date}"  # Создаем сообщение через f-строки
        return txt  # Возвращаем переменную txt для отображения сообщения пользователю в указанном формате
